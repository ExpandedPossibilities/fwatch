#!/bin/sh

# Copyright (c) 2015, Expanded Possibilities, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following
# disclaimer in the documentation and/or other materials provided
# with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
#  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
#  THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#  SUCH DAMAGE.


BIN_DIR="$1";
TEST_DIR="$BIN_DIR/tests";
shift;

TESTS=$@;

ALL_TESTS='fwatch_help canname_help t_findslashes t_canonicalpath_err t_canonicalpath_times t_watchpaths t_canonicalpath'

if [ -z "$TESTS" ]; then
  TESTS="$ALL_TESTS"
fi

TFAIL=0;
TPASS=0;

testit () {
  [ -n "$SHOW_TESTS" ] && printf '\n`%s`: ' "$*";
  if "$@"; then
    STPASS=`expr $STPASS + 1`;
    printf 1;
    return 0;
  else
    STFAIL=`expr $STFAIL + 1`;
    printf 0;
    return 1;
  fi
}

TO_DEL='';
rmtd () {
  for de in $TO_DEL; do
    D=$(printf "%s" "$de" | unvis);
    [ -d "$D" ] && rm -r "$D";
  done
  exit;
}
trap rmtd EXIT INT TERM;


mtd () {
  D="$(mktemp -dt "$1.XXXXXX")" && TO_DEL="$(printf "%s" "$D"|vis -w;) $TO_DEL" || exit
  printf "%s\n" "$D";
}


for t in $TESTS; do
  STFAIL=0;
  STPASS=0;
  printf "$t ";
  case $t in
    t_findslashes)
      for p in foo/bar/baz \
               /foo/bar/baz \
               //foo/bar/baz \
               /foo//bar/baz \
               /foo/bar/baz/ \
               //foo/bar/baz// \
               /foo//bar/baz// \
               foo \
               ' /foo' \
               'foo/ /' \
               '' ; do
        testit "$TEST_DIR/t_findslashes" "$p"
      done;;
    t_watchpaths)
      if D="$(mtd t_watchpaths)"; then
        SD="foo/bar/baz/quux";
        tracker="$D/tracker";
        towatch="$D/$SD/file_to_watch";
        mkdir -p "$D/$SD";

        rm -f -- "$tracker"
        rm -f -- "$towatch.1" "$towatch.2" "$towatch.3"

        "$TEST_DIR/t_watchpaths" 6 "$towatch.1" "$towatch.2" \
                                   "$towatch.3" > "$tracker" &
        pid=$!;
        wait_for_start=0;
        while [ $wait_for_start -lt 5 ] && [ ! -f "$tracker" ]; do
          wait_for_start=$(expr $wait_for_start + 1);
          sleep 1;
        done
        testit test -f "$tracker"

        echo a > "$towatch.1";sleep 1;
        echo alpha  > "$towatch.2";sleep 1;
        echo b >> "$towatch.1";sleep 1;

        rm "$towatch.1"
        rm -r "$D/$SD";
        mkdir -p "$D/$SD";
        echo gamma > "$towatch.1";sleep 1;
        echo different > "$towatch.other"
        mv "$towatch.other" "$towatch.1";sleep 1;
        echo delta >> "$towatch.2";sleep 1;
        testit test -z "$(ps -p $pid -o 'pid=')";
        ps -p $pid -o 'pid=' && { kill $pid; wait $pid; }
        testit test -f "$tracker"
        testit test $(grep -cF "$towatch.3" "$tracker") = 0
        testit test $(grep -cF "$towatch.2" "$tracker") = 2
        testit test $(grep -cF "$towatch.1" "$tracker") = 4
      else
        echo "Unable to make temporary directory for testing watchpaths"
        testit false;
      fi;;
    t_canonicalpath_err)
      testit "$TEST_DIR/t_canonicalpath_err";;
    t_canonicalpath_times)
      testit "$TEST_DIR/t_canonicalpath_times" 1000;;
    t_canonicalpath)
      while read base rel exp; do
        [ "$base" = 'NONE' ] && base='';
        [ "$rel" = 'NONE' ] && rel='';
        testit "$TEST_DIR/t_canonicalpath" "$base" "$rel" "$exp";
      done < "$TEST_DIR/cannames";;
    fwatch_help)
      for h in '--help' '-h'; do
        testit eval "$BIN_DIR/fwatch $h | grep -qi usage"
      done;;
    canname_help)
      for h in '--help' '-h'; do
        testit eval "$BIN_DIR/canname $h | grep -qi usage"
      done;;
    *) echo UNRECOGNIZED TEST;
      testit false;;
  esac
  echo;
  echo "PASS: $STPASS FAIL: $STFAIL";
  TPASS=`expr $TPASS + $STPASS`;
  TFAIL=`expr $TFAIL + $STFAIL`;
  echo;
done

echo "TOTAL_PASS: $TPASS TOTAL_FAIL: $TFAIL";
[ $TFAIL -gt 0 ] && exit 1;
exit 0;